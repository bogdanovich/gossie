// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"

	"github.com/bogdanobich/go-thrift/thrift"
	"github.com/bogdanovich/gossie/src/cassandra"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void login(AuthenticationRequest auth_request)")
	fmt.Fprintln(os.Stderr, "  void set_keyspace(string keyspace)")
	fmt.Fprintln(os.Stderr, "  ColumnOrSuperColumn get(string key, ColumnPath column_path, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "   get_slice(string key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  i32 get_count(string key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "   multiget_slice( keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "   multiget_count( keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "   get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "   get_paged_slice(string column_family, KeyRange range, string start_column, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "   get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  void insert(string key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  void add(string key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  CASResult cas(string key, string column_family,  expected,  updates, ConsistencyLevel serial_consistency_level, ConsistencyLevel commit_consistency_level)")
	fmt.Fprintln(os.Stderr, "  void remove(string key, ColumnPath column_path, i64 timestamp, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  void remove_counter(string key, ColumnPath path, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  void batch_mutate( mutation_map, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  void atomic_batch_mutate( mutation_map, ConsistencyLevel consistency_level)")
	fmt.Fprintln(os.Stderr, "  void truncate(string cfname)")
	fmt.Fprintln(os.Stderr, "   get_multi_slice(MultiSliceRequest request)")
	fmt.Fprintln(os.Stderr, "   describe_schema_versions()")
	fmt.Fprintln(os.Stderr, "   describe_keyspaces()")
	fmt.Fprintln(os.Stderr, "  string describe_cluster_name()")
	fmt.Fprintln(os.Stderr, "  string describe_version()")
	fmt.Fprintln(os.Stderr, "   describe_ring(string keyspace)")
	fmt.Fprintln(os.Stderr, "   describe_local_ring(string keyspace)")
	fmt.Fprintln(os.Stderr, "   describe_token_map()")
	fmt.Fprintln(os.Stderr, "  string describe_partitioner()")
	fmt.Fprintln(os.Stderr, "  string describe_snitch()")
	fmt.Fprintln(os.Stderr, "  KsDef describe_keyspace(string keyspace)")
	fmt.Fprintln(os.Stderr, "   describe_splits(string cfName, string start_token, string end_token, i32 keys_per_split)")
	fmt.Fprintln(os.Stderr, "  string trace_next_query()")
	fmt.Fprintln(os.Stderr, "   describe_splits_ex(string cfName, string start_token, string end_token, i32 keys_per_split)")
	fmt.Fprintln(os.Stderr, "  string system_add_column_family(CfDef cf_def)")
	fmt.Fprintln(os.Stderr, "  string system_drop_column_family(string column_family)")
	fmt.Fprintln(os.Stderr, "  string system_add_keyspace(KsDef ks_def)")
	fmt.Fprintln(os.Stderr, "  string system_drop_keyspace(string keyspace)")
	fmt.Fprintln(os.Stderr, "  string system_update_keyspace(KsDef ks_def)")
	fmt.Fprintln(os.Stderr, "  string system_update_column_family(CfDef cf_def)")
	fmt.Fprintln(os.Stderr, "  CqlResult execute_cql_query(string query, Compression compression)")
	fmt.Fprintln(os.Stderr, "  CqlResult execute_cql3_query(string query, Compression compression, ConsistencyLevel consistency)")
	fmt.Fprintln(os.Stderr, "  CqlPreparedResult prepare_cql_query(string query, Compression compression)")
	fmt.Fprintln(os.Stderr, "  CqlPreparedResult prepare_cql3_query(string query, Compression compression)")
	fmt.Fprintln(os.Stderr, "  CqlResult execute_prepared_cql_query(i32 itemId,  values)")
	fmt.Fprintln(os.Stderr, "  CqlResult execute_prepared_cql3_query(i32 itemId,  values, ConsistencyLevel consistency)")
	fmt.Fprintln(os.Stderr, "  void set_cql_version(string version)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := cassandra.NewCassandraClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "login":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Login requires 1 args")
			flag.Usage()
		}
		arg162 := flag.Arg(1)
		mbTrans163 := thrift.NewTMemoryBufferLen(len(arg162))
		defer mbTrans163.Close()
		_, err164 := mbTrans163.WriteString(arg162)
		if err164 != nil {
			Usage()
			return
		}
		factory165 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt166 := factory165.GetProtocol(mbTrans163)
		argvalue0 := cassandra.NewAuthenticationRequest()
		err167 := argvalue0.Read(jsProt166)
		if err167 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Login(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetKeyspace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SetKeyspace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "Get requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg170 := flag.Arg(2)
		mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
		defer mbTrans171.Close()
		_, err172 := mbTrans171.WriteString(arg170)
		if err172 != nil {
			Usage()
			return
		}
		factory173 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt174 := factory173.GetProtocol(mbTrans171)
		argvalue1 := cassandra.NewColumnPath()
		err175 := argvalue1.Read(jsProt174)
		if err175 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := cassandra.ConsistencyLevel(tmp2)
		value2 := argvalue2
		fmt.Print(client.Get(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_slice":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetSlice requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg177 := flag.Arg(2)
		mbTrans178 := thrift.NewTMemoryBufferLen(len(arg177))
		defer mbTrans178.Close()
		_, err179 := mbTrans178.WriteString(arg177)
		if err179 != nil {
			Usage()
			return
		}
		factory180 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt181 := factory180.GetProtocol(mbTrans178)
		argvalue1 := cassandra.NewColumnParent()
		err182 := argvalue1.Read(jsProt181)
		if err182 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg183 := flag.Arg(3)
		mbTrans184 := thrift.NewTMemoryBufferLen(len(arg183))
		defer mbTrans184.Close()
		_, err185 := mbTrans184.WriteString(arg183)
		if err185 != nil {
			Usage()
			return
		}
		factory186 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt187 := factory186.GetProtocol(mbTrans184)
		argvalue2 := cassandra.NewSlicePredicate()
		err188 := argvalue2.Read(jsProt187)
		if err188 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetSlice(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_count":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetCount requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg190 := flag.Arg(2)
		mbTrans191 := thrift.NewTMemoryBufferLen(len(arg190))
		defer mbTrans191.Close()
		_, err192 := mbTrans191.WriteString(arg190)
		if err192 != nil {
			Usage()
			return
		}
		factory193 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt194 := factory193.GetProtocol(mbTrans191)
		argvalue1 := cassandra.NewColumnParent()
		err195 := argvalue1.Read(jsProt194)
		if err195 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg196 := flag.Arg(3)
		mbTrans197 := thrift.NewTMemoryBufferLen(len(arg196))
		defer mbTrans197.Close()
		_, err198 := mbTrans197.WriteString(arg196)
		if err198 != nil {
			Usage()
			return
		}
		factory199 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt200 := factory199.GetProtocol(mbTrans197)
		argvalue2 := cassandra.NewSlicePredicate()
		err201 := argvalue2.Read(jsProt200)
		if err201 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetCount(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "multiget_slice":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MultigetSlice requires 4 args")
			flag.Usage()
		}
		arg202 := flag.Arg(1)
		mbTrans203 := thrift.NewTMemoryBufferLen(len(arg202))
		defer mbTrans203.Close()
		_, err204 := mbTrans203.WriteString(arg202)
		if err204 != nil {
			Usage()
			return
		}
		factory205 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt206 := factory205.GetProtocol(mbTrans203)
		containerStruct0 := cassandra.NewCassandraMultigetSliceArgs()
		err207 := containerStruct0.ReadField1(jsProt206)
		if err207 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Keys
		value0 := argvalue0
		arg208 := flag.Arg(2)
		mbTrans209 := thrift.NewTMemoryBufferLen(len(arg208))
		defer mbTrans209.Close()
		_, err210 := mbTrans209.WriteString(arg208)
		if err210 != nil {
			Usage()
			return
		}
		factory211 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt212 := factory211.GetProtocol(mbTrans209)
		argvalue1 := cassandra.NewColumnParent()
		err213 := argvalue1.Read(jsProt212)
		if err213 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg214 := flag.Arg(3)
		mbTrans215 := thrift.NewTMemoryBufferLen(len(arg214))
		defer mbTrans215.Close()
		_, err216 := mbTrans215.WriteString(arg214)
		if err216 != nil {
			Usage()
			return
		}
		factory217 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt218 := factory217.GetProtocol(mbTrans215)
		argvalue2 := cassandra.NewSlicePredicate()
		err219 := argvalue2.Read(jsProt218)
		if err219 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.MultigetSlice(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "multiget_count":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MultigetCount requires 4 args")
			flag.Usage()
		}
		arg220 := flag.Arg(1)
		mbTrans221 := thrift.NewTMemoryBufferLen(len(arg220))
		defer mbTrans221.Close()
		_, err222 := mbTrans221.WriteString(arg220)
		if err222 != nil {
			Usage()
			return
		}
		factory223 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt224 := factory223.GetProtocol(mbTrans221)
		containerStruct0 := cassandra.NewCassandraMultigetCountArgs()
		err225 := containerStruct0.ReadField1(jsProt224)
		if err225 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Keys
		value0 := argvalue0
		arg226 := flag.Arg(2)
		mbTrans227 := thrift.NewTMemoryBufferLen(len(arg226))
		defer mbTrans227.Close()
		_, err228 := mbTrans227.WriteString(arg226)
		if err228 != nil {
			Usage()
			return
		}
		factory229 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt230 := factory229.GetProtocol(mbTrans227)
		argvalue1 := cassandra.NewColumnParent()
		err231 := argvalue1.Read(jsProt230)
		if err231 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg232 := flag.Arg(3)
		mbTrans233 := thrift.NewTMemoryBufferLen(len(arg232))
		defer mbTrans233.Close()
		_, err234 := mbTrans233.WriteString(arg232)
		if err234 != nil {
			Usage()
			return
		}
		factory235 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt236 := factory235.GetProtocol(mbTrans233)
		argvalue2 := cassandra.NewSlicePredicate()
		err237 := argvalue2.Read(jsProt236)
		if err237 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.MultigetCount(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_range_slices":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRangeSlices requires 4 args")
			flag.Usage()
		}
		arg238 := flag.Arg(1)
		mbTrans239 := thrift.NewTMemoryBufferLen(len(arg238))
		defer mbTrans239.Close()
		_, err240 := mbTrans239.WriteString(arg238)
		if err240 != nil {
			Usage()
			return
		}
		factory241 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt242 := factory241.GetProtocol(mbTrans239)
		argvalue0 := cassandra.NewColumnParent()
		err243 := argvalue0.Read(jsProt242)
		if err243 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg244 := flag.Arg(2)
		mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
		defer mbTrans245.Close()
		_, err246 := mbTrans245.WriteString(arg244)
		if err246 != nil {
			Usage()
			return
		}
		factory247 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt248 := factory247.GetProtocol(mbTrans245)
		argvalue1 := cassandra.NewSlicePredicate()
		err249 := argvalue1.Read(jsProt248)
		if err249 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg250 := flag.Arg(3)
		mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
		defer mbTrans251.Close()
		_, err252 := mbTrans251.WriteString(arg250)
		if err252 != nil {
			Usage()
			return
		}
		factory253 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt254 := factory253.GetProtocol(mbTrans251)
		argvalue2 := cassandra.NewKeyRange()
		err255 := argvalue2.Read(jsProt254)
		if err255 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetRangeSlices(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_paged_slice":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPagedSlice requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg257 := flag.Arg(2)
		mbTrans258 := thrift.NewTMemoryBufferLen(len(arg257))
		defer mbTrans258.Close()
		_, err259 := mbTrans258.WriteString(arg257)
		if err259 != nil {
			Usage()
			return
		}
		factory260 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt261 := factory260.GetProtocol(mbTrans258)
		argvalue1 := cassandra.NewKeyRange()
		err262 := argvalue1.Read(jsProt261)
		if err262 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := []byte(flag.Arg(3))
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPagedSlice(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_indexed_slices":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetIndexedSlices requires 4 args")
			flag.Usage()
		}
		arg264 := flag.Arg(1)
		mbTrans265 := thrift.NewTMemoryBufferLen(len(arg264))
		defer mbTrans265.Close()
		_, err266 := mbTrans265.WriteString(arg264)
		if err266 != nil {
			Usage()
			return
		}
		factory267 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt268 := factory267.GetProtocol(mbTrans265)
		argvalue0 := cassandra.NewColumnParent()
		err269 := argvalue0.Read(jsProt268)
		if err269 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg270 := flag.Arg(2)
		mbTrans271 := thrift.NewTMemoryBufferLen(len(arg270))
		defer mbTrans271.Close()
		_, err272 := mbTrans271.WriteString(arg270)
		if err272 != nil {
			Usage()
			return
		}
		factory273 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt274 := factory273.GetProtocol(mbTrans271)
		argvalue1 := cassandra.NewIndexClause()
		err275 := argvalue1.Read(jsProt274)
		if err275 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg276 := flag.Arg(3)
		mbTrans277 := thrift.NewTMemoryBufferLen(len(arg276))
		defer mbTrans277.Close()
		_, err278 := mbTrans277.WriteString(arg276)
		if err278 != nil {
			Usage()
			return
		}
		factory279 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt280 := factory279.GetProtocol(mbTrans277)
		argvalue2 := cassandra.NewSlicePredicate()
		err281 := argvalue2.Read(jsProt280)
		if err281 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetIndexedSlices(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "insert":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "Insert requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg283 := flag.Arg(2)
		mbTrans284 := thrift.NewTMemoryBufferLen(len(arg283))
		defer mbTrans284.Close()
		_, err285 := mbTrans284.WriteString(arg283)
		if err285 != nil {
			Usage()
			return
		}
		factory286 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt287 := factory286.GetProtocol(mbTrans284)
		argvalue1 := cassandra.NewColumnParent()
		err288 := argvalue1.Read(jsProt287)
		if err288 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg289 := flag.Arg(3)
		mbTrans290 := thrift.NewTMemoryBufferLen(len(arg289))
		defer mbTrans290.Close()
		_, err291 := mbTrans290.WriteString(arg289)
		if err291 != nil {
			Usage()
			return
		}
		factory292 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt293 := factory292.GetProtocol(mbTrans290)
		argvalue2 := cassandra.NewColumn()
		err294 := argvalue2.Read(jsProt293)
		if err294 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.Insert(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "Add requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg296 := flag.Arg(2)
		mbTrans297 := thrift.NewTMemoryBufferLen(len(arg296))
		defer mbTrans297.Close()
		_, err298 := mbTrans297.WriteString(arg296)
		if err298 != nil {
			Usage()
			return
		}
		factory299 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt300 := factory299.GetProtocol(mbTrans297)
		argvalue1 := cassandra.NewColumnParent()
		err301 := argvalue1.Read(jsProt300)
		if err301 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg302 := flag.Arg(3)
		mbTrans303 := thrift.NewTMemoryBufferLen(len(arg302))
		defer mbTrans303.Close()
		_, err304 := mbTrans303.WriteString(arg302)
		if err304 != nil {
			Usage()
			return
		}
		factory305 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt306 := factory305.GetProtocol(mbTrans303)
		argvalue2 := cassandra.NewCounterColumn()
		err307 := argvalue2.Read(jsProt306)
		if err307 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.Add(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "cas":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "Cas requires 6 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg310 := flag.Arg(3)
		mbTrans311 := thrift.NewTMemoryBufferLen(len(arg310))
		defer mbTrans311.Close()
		_, err312 := mbTrans311.WriteString(arg310)
		if err312 != nil {
			Usage()
			return
		}
		factory313 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt314 := factory313.GetProtocol(mbTrans311)
		containerStruct2 := cassandra.NewCassandraCasArgs()
		err315 := containerStruct2.ReadField3(jsProt314)
		if err315 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Expected
		value2 := argvalue2
		arg316 := flag.Arg(4)
		mbTrans317 := thrift.NewTMemoryBufferLen(len(arg316))
		defer mbTrans317.Close()
		_, err318 := mbTrans317.WriteString(arg316)
		if err318 != nil {
			Usage()
			return
		}
		factory319 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt320 := factory319.GetProtocol(mbTrans317)
		containerStruct3 := cassandra.NewCassandraCasArgs()
		err321 := containerStruct3.ReadField4(jsProt320)
		if err321 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Updates
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := cassandra.ConsistencyLevel(tmp4)
		value4 := argvalue4
		tmp5, err := (strconv.Atoi(flag.Arg(6)))
		if err != nil {
			Usage()
			return
		}
		argvalue5 := cassandra.ConsistencyLevel(tmp5)
		value5 := argvalue5
		fmt.Print(client.Cas(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "remove":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "Remove requires 4 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg323 := flag.Arg(2)
		mbTrans324 := thrift.NewTMemoryBufferLen(len(arg323))
		defer mbTrans324.Close()
		_, err325 := mbTrans324.WriteString(arg323)
		if err325 != nil {
			Usage()
			return
		}
		factory326 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt327 := factory326.GetProtocol(mbTrans324)
		argvalue1 := cassandra.NewColumnPath()
		err328 := argvalue1.Read(jsProt327)
		if err328 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err329 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err329 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := cassandra.ConsistencyLevel(tmp3)
		value3 := argvalue3
		fmt.Print(client.Remove(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "remove_counter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RemoveCounter requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		arg331 := flag.Arg(2)
		mbTrans332 := thrift.NewTMemoryBufferLen(len(arg331))
		defer mbTrans332.Close()
		_, err333 := mbTrans332.WriteString(arg331)
		if err333 != nil {
			Usage()
			return
		}
		factory334 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt335 := factory334.GetProtocol(mbTrans332)
		argvalue1 := cassandra.NewColumnPath()
		err336 := argvalue1.Read(jsProt335)
		if err336 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := cassandra.ConsistencyLevel(tmp2)
		value2 := argvalue2
		fmt.Print(client.RemoveCounter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "batch_mutate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "BatchMutate requires 2 args")
			flag.Usage()
		}
		arg337 := flag.Arg(1)
		mbTrans338 := thrift.NewTMemoryBufferLen(len(arg337))
		defer mbTrans338.Close()
		_, err339 := mbTrans338.WriteString(arg337)
		if err339 != nil {
			Usage()
			return
		}
		factory340 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt341 := factory340.GetProtocol(mbTrans338)
		containerStruct0 := cassandra.NewCassandraBatchMutateArgs()
		err342 := containerStruct0.ReadField1(jsProt341)
		if err342 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.MutationMap
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.ConsistencyLevel(tmp1)
		value1 := argvalue1
		fmt.Print(client.BatchMutate(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "atomic_batch_mutate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AtomicBatchMutate requires 2 args")
			flag.Usage()
		}
		arg343 := flag.Arg(1)
		mbTrans344 := thrift.NewTMemoryBufferLen(len(arg343))
		defer mbTrans344.Close()
		_, err345 := mbTrans344.WriteString(arg343)
		if err345 != nil {
			Usage()
			return
		}
		factory346 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt347 := factory346.GetProtocol(mbTrans344)
		containerStruct0 := cassandra.NewCassandraAtomicBatchMutateArgs()
		err348 := containerStruct0.ReadField1(jsProt347)
		if err348 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.MutationMap
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.ConsistencyLevel(tmp1)
		value1 := argvalue1
		fmt.Print(client.AtomicBatchMutate(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "truncate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Truncate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.Truncate(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_multi_slice":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMultiSlice requires 1 args")
			flag.Usage()
		}
		arg350 := flag.Arg(1)
		mbTrans351 := thrift.NewTMemoryBufferLen(len(arg350))
		defer mbTrans351.Close()
		_, err352 := mbTrans351.WriteString(arg350)
		if err352 != nil {
			Usage()
			return
		}
		factory353 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt354 := factory353.GetProtocol(mbTrans351)
		argvalue0 := cassandra.NewMultiSliceRequest()
		err355 := argvalue0.Read(jsProt354)
		if err355 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetMultiSlice(context.Background(), value0))
		fmt.Print("\n")
		break
	case "describe_schema_versions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DescribeSchemaVersions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DescribeSchemaVersions(context.Background()))
		fmt.Print("\n")
		break
	case "describe_keyspaces":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DescribeKeyspaces requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DescribeKeyspaces(context.Background()))
		fmt.Print("\n")
		break
	case "describe_cluster_name":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DescribeClusterName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DescribeClusterName(context.Background()))
		fmt.Print("\n")
		break
	case "describe_version":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DescribeVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DescribeVersion(context.Background()))
		fmt.Print("\n")
		break
	case "describe_ring":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeRing requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DescribeRing(context.Background(), value0))
		fmt.Print("\n")
		break
	case "describe_local_ring":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeLocalRing requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DescribeLocalRing(context.Background(), value0))
		fmt.Print("\n")
		break
	case "describe_token_map":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DescribeTokenMap requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DescribeTokenMap(context.Background()))
		fmt.Print("\n")
		break
	case "describe_partitioner":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DescribePartitioner requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DescribePartitioner(context.Background()))
		fmt.Print("\n")
		break
	case "describe_snitch":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "DescribeSnitch requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.DescribeSnitch(context.Background()))
		fmt.Print("\n")
		break
	case "describe_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeKeyspace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DescribeKeyspace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "describe_splits":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DescribeSplits requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err362 := (strconv.Atoi(flag.Arg(4)))
		if err362 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.DescribeSplits(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "trace_next_query":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "TraceNextQuery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.TraceNextQuery(context.Background()))
		fmt.Print("\n")
		break
	case "describe_splits_ex":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DescribeSplitsEx requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err366 := (strconv.Atoi(flag.Arg(4)))
		if err366 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.DescribeSplitsEx(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "system_add_column_family":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemAddColumnFamily requires 1 args")
			flag.Usage()
		}
		arg367 := flag.Arg(1)
		mbTrans368 := thrift.NewTMemoryBufferLen(len(arg367))
		defer mbTrans368.Close()
		_, err369 := mbTrans368.WriteString(arg367)
		if err369 != nil {
			Usage()
			return
		}
		factory370 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt371 := factory370.GetProtocol(mbTrans368)
		argvalue0 := cassandra.NewCfDef()
		err372 := argvalue0.Read(jsProt371)
		if err372 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemAddColumnFamily(context.Background(), value0))
		fmt.Print("\n")
		break
	case "system_drop_column_family":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemDropColumnFamily requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SystemDropColumnFamily(context.Background(), value0))
		fmt.Print("\n")
		break
	case "system_add_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemAddKeyspace requires 1 args")
			flag.Usage()
		}
		arg374 := flag.Arg(1)
		mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
		defer mbTrans375.Close()
		_, err376 := mbTrans375.WriteString(arg374)
		if err376 != nil {
			Usage()
			return
		}
		factory377 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt378 := factory377.GetProtocol(mbTrans375)
		argvalue0 := cassandra.NewKsDef()
		err379 := argvalue0.Read(jsProt378)
		if err379 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemAddKeyspace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "system_drop_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemDropKeyspace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SystemDropKeyspace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "system_update_keyspace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemUpdateKeyspace requires 1 args")
			flag.Usage()
		}
		arg381 := flag.Arg(1)
		mbTrans382 := thrift.NewTMemoryBufferLen(len(arg381))
		defer mbTrans382.Close()
		_, err383 := mbTrans382.WriteString(arg381)
		if err383 != nil {
			Usage()
			return
		}
		factory384 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt385 := factory384.GetProtocol(mbTrans382)
		argvalue0 := cassandra.NewKsDef()
		err386 := argvalue0.Read(jsProt385)
		if err386 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemUpdateKeyspace(context.Background(), value0))
		fmt.Print("\n")
		break
	case "system_update_column_family":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemUpdateColumnFamily requires 1 args")
			flag.Usage()
		}
		arg387 := flag.Arg(1)
		mbTrans388 := thrift.NewTMemoryBufferLen(len(arg387))
		defer mbTrans388.Close()
		_, err389 := mbTrans388.WriteString(arg387)
		if err389 != nil {
			Usage()
			return
		}
		factory390 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt391 := factory390.GetProtocol(mbTrans388)
		argvalue0 := cassandra.NewCfDef()
		err392 := argvalue0.Read(jsProt391)
		if err392 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SystemUpdateColumnFamily(context.Background(), value0))
		fmt.Print("\n")
		break
	case "execute_cql_query":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExecuteCqlQuery requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.Compression(tmp1)
		value1 := argvalue1
		fmt.Print(client.ExecuteCqlQuery(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "execute_cql3_query":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ExecuteCql3Query requires 3 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.Compression(tmp1)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := cassandra.ConsistencyLevel(tmp2)
		value2 := argvalue2
		fmt.Print(client.ExecuteCql3Query(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "prepare_cql_query":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PrepareCqlQuery requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.Compression(tmp1)
		value1 := argvalue1
		fmt.Print(client.PrepareCqlQuery(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "prepare_cql3_query":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PrepareCql3Query requires 2 args")
			flag.Usage()
		}
		argvalue0 := []byte(flag.Arg(1))
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := cassandra.Compression(tmp1)
		value1 := argvalue1
		fmt.Print(client.PrepareCql3Query(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "execute_prepared_cql_query":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExecutePreparedCqlQuery requires 2 args")
			flag.Usage()
		}
		tmp0, err397 := (strconv.Atoi(flag.Arg(1)))
		if err397 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg398 := flag.Arg(2)
		mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
		defer mbTrans399.Close()
		_, err400 := mbTrans399.WriteString(arg398)
		if err400 != nil {
			Usage()
			return
		}
		factory401 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt402 := factory401.GetProtocol(mbTrans399)
		containerStruct1 := cassandra.NewCassandraExecutePreparedCqlQueryArgs()
		err403 := containerStruct1.ReadField2(jsProt402)
		if err403 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Values
		value1 := argvalue1
		fmt.Print(client.ExecutePreparedCqlQuery(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "execute_prepared_cql3_query":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ExecutePreparedCql3Query requires 3 args")
			flag.Usage()
		}
		tmp0, err404 := (strconv.Atoi(flag.Arg(1)))
		if err404 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg405 := flag.Arg(2)
		mbTrans406 := thrift.NewTMemoryBufferLen(len(arg405))
		defer mbTrans406.Close()
		_, err407 := mbTrans406.WriteString(arg405)
		if err407 != nil {
			Usage()
			return
		}
		factory408 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt409 := factory408.GetProtocol(mbTrans406)
		containerStruct1 := cassandra.NewCassandraExecutePreparedCql3QueryArgs()
		err410 := containerStruct1.ReadField2(jsProt409)
		if err410 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Values
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := cassandra.ConsistencyLevel(tmp2)
		value2 := argvalue2
		fmt.Print(client.ExecutePreparedCql3Query(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "set_cql_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetCqlVersion requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.SetCqlVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
